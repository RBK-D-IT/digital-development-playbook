"use strict";(self.webpackChunkdigital_development_playbook=self.webpackChunkdigital_development_playbook||[]).push([[284],{2430:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>d,contentTitle:()=>r,default:()=>h,frontMatter:()=>o,metadata:()=>l,toc:()=>a});var t=s(4848),i=s(8453);const o={},r="Deployment Process",l={id:"devops-and-automation/deployment-process",title:"Deployment Process",description:"Overview",source:"@site/docs/devops-and-automation/deployment-process.md",sourceDirName:"devops-and-automation",slug:"/devops-and-automation/deployment-process",permalink:"/digital-development-playbook/devops-and-automation/deployment-process",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/devops-and-automation/deployment-process.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"CI/CD Pipeline and Automation",permalink:"/digital-development-playbook/devops-and-automation/cicd-pipeline-and-automation"},next:{title:"Infrastructure as Code",permalink:"/digital-development-playbook/devops-and-automation/infrastructure-as-code"}},d={},a=[{value:"Overview",id:"overview",level:2},{value:"AWS Deployment Workflow Overview",id:"aws-deployment-workflow-overview",level:2},{value:"Deployment Stages",id:"deployment-stages",level:2},{value:"1. Deployment to Development Environment",id:"1-deployment-to-development-environment",level:3},{value:"Steps:",id:"steps",level:4},{value:"Who is involved:",id:"who-is-involved",level:4},{value:"2. Deployment to Test Environment",id:"2-deployment-to-test-environment",level:3},{value:"Steps:",id:"steps-1",level:4},{value:"Who is involved:",id:"who-is-involved-1",level:4},{value:"3. Deployment to Production Environment",id:"3-deployment-to-production-environment",level:3},{value:"Steps:",id:"steps-2",level:4},{value:"Who is involved:",id:"who-is-involved-2",level:4},{value:"Rollback Strategy",id:"rollback-strategy",level:2},{value:"Deployment Responsibilities",id:"deployment-responsibilities",level:2},{value:"Developers",id:"developers",level:3},{value:"Testing Team",id:"testing-team",level:3},{value:"Stakeholders",id:"stakeholders",level:3},{value:"Deployment Validation and Monitoring",id:"deployment-validation-and-monitoring",level:2},{value:"Tools and Technologies",id:"tools-and-technologies",level:2}];function c(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",hr:"hr",img:"img",li:"li",ol:"ol",p:"p",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"deployment-process",children:"Deployment Process"})}),"\n",(0,t.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,t.jsxs)(n.p,{children:["This document outlines the detailed process for deploying code across the ",(0,t.jsx)(n.strong,{children:"development"}),", ",(0,t.jsx)(n.strong,{children:"test"}),", and ",(0,t.jsx)(n.strong,{children:"production"})," environments using ",(0,t.jsx)(n.strong,{children:"GitHub Actions"}),", ",(0,t.jsx)(n.strong,{children:"AWS CDK"}),", and ",(0,t.jsx)(n.strong,{children:"AWS CloudFormation"}),". The goal is to ensure that deployments are consistent, automated, and follow a structured workflow with proper validations and rollback mechanisms."]}),"\n",(0,t.jsx)(n.p,{children:"The deployment process covers:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"How deployments are triggered."}),"\n",(0,t.jsx)(n.li,{children:"Who is responsible for different steps in the process."}),"\n",(0,t.jsx)(n.li,{children:"What happens before, during, and after a deployment."}),"\n",(0,t.jsx)(n.li,{children:"Rollback strategies in case of issues."}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"aws-deployment-workflow-overview",children:"AWS Deployment Workflow Overview"}),"\n",(0,t.jsxs)(n.p,{children:["The following diagram provides an overview of how our code moves from ",(0,t.jsx)(n.strong,{children:"GitHub"})," to ",(0,t.jsx)(n.strong,{children:"AWS"}),", showing how our ",(0,t.jsx)(n.strong,{children:"CI/CD process"})," uses ",(0,t.jsx)(n.strong,{children:"GitHub Actions"}),", ",(0,t.jsx)(n.strong,{children:"AWS CDK"}),", and ",(0,t.jsx)(n.strong,{children:"CloudFormation"})," to deploy applications and infrastructure automatically:"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{alt:"AWS Deployment Architecture",src:s(6328).A+"",width:"1920",height:"766"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Steps Explained"}),":"]}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Build and Test"}),": After a pull request is merged into ",(0,t.jsx)(n.code,{children:"main"}),", the GitHub Actions pipeline runs the build and test process."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"OpenID Connect (OIDC)"}),": The GitHub Actions workflow requests an OIDC token from the identity provider for authentication with AWS."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Temporary Token Issued"}),": AWS issues a temporary token via ",(0,t.jsx)(n.strong,{children:"Security Token Service (STS)"})," to authenticate the workflow."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"IAM Role Assumed"}),": GitHub Actions assumes an ",(0,t.jsx)(n.strong,{children:"IAM role"})," to gain permissions for deploying resources to AWS."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Temporary AWS Credentials"}),": The workflow is granted temporary AWS credentials to perform actions within AWS."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Run CDK Synthesis and Deployment"}),": ",(0,t.jsx)(n.strong,{children:"AWS CDK"})," synthesizes the CloudFormation templates and initiates the deployment process."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Deploy AWS Resources"}),": Using the CloudFormation templates, AWS resources such as ",(0,t.jsx)(n.strong,{children:"Lambda functions"}),", ",(0,t.jsx)(n.strong,{children:"API Gateway"}),", and ",(0,t.jsx)(n.strong,{children:"CloudWatch Logs"})," are provisioned and deployed."]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"This diagram visually represents the flow of deployment tasks, which are described in more detail in the deployment stages below."}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"deployment-stages",children:"Deployment Stages"}),"\n",(0,t.jsx)(n.h3,{id:"1-deployment-to-development-environment",children:"1. Deployment to Development Environment"}),"\n",(0,t.jsxs)(n.p,{children:["Deployments to the ",(0,t.jsx)(n.strong,{children:"development environment"})," are triggered automatically through the CI pipeline whenever changes are merged into the ",(0,t.jsx)(n.code,{children:"main"})," branch."]}),"\n",(0,t.jsx)(n.h4,{id:"steps",children:"Steps:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Trigger"}),": After a pull request (PR) is merged into ",(0,t.jsx)(n.code,{children:"main"}),", the GitHub Actions pipeline is triggered."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Build and Test"}),": The application is built, and all tests (unit, integration, E2E) are run."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"AWS CDK Deployment"}),":","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["The pipeline assumes an AWS role for the ",(0,t.jsx)(n.strong,{children:"development account"}),"."]}),"\n",(0,t.jsx)(n.li,{children:"AWS CDK provisions the necessary infrastructure and deploys the application to the development environment via CloudFormation."}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Smoke Testing"}),": Basic smoke tests are run in the development environment to ensure the deployment was successful."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Feedback"}),": If the deployment or tests fail, feedback is provided to the development team for further action."]}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"who-is-involved",children:"Who is involved:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Developers"}),": Responsible for managing the CI/CD pipeline, monitoring the deployment process, and resolving any issues that arise during deployment or testing."]}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h3,{id:"2-deployment-to-test-environment",children:"2. Deployment to Test Environment"}),"\n",(0,t.jsxs)(n.p,{children:["Deployments to the ",(0,t.jsx)(n.strong,{children:"test environment"})," are triggered manually when a release candidate is ready for testing."]}),"\n",(0,t.jsx)(n.h4,{id:"steps-1",children:"Steps:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Create a Release Candidate"}),": The development team drafts a release candidate on GitHub and tags it as a pre-release."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Trigger the Test Deployment"}),": Once the release candidate is created, a manual deployment to the test environment is triggered via GitHub Actions."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"AWS CDK Deployment"}),":","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["The pipeline assumes an AWS role for the ",(0,t.jsx)(n.strong,{children:"test account"}),"."]}),"\n",(0,t.jsx)(n.li,{children:"AWS CDK provisions the infrastructure and deploys the release candidate to the test environment via CloudFormation."}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Run Tests"}),":","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Integration tests and smoke tests are re-run in the test environment."}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"User Acceptance Testing (UAT)"}),":","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["The ",(0,t.jsx)(n.strong,{children:"Testing Team"})," performs UAT based on the test plan to validate the release candidate. They create and execute test plans to ensure the software meets the business requirements."]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Approval or Rollback"}),":","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"If the UAT passes, the release candidate is approved for production."}),"\n",(0,t.jsx)(n.li,{children:"If issues arise, the team addresses the issues in the development environment and re-tests the release."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"who-is-involved-1",children:"Who is involved:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Developers"}),": Responsible for creating the release candidate, deploying it to the test environment, and fixing any issues discovered during testing."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Testing Team"}),": Responsible for creating the UAT plan, conducting the UAT, and reporting any issues that need resolution."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Stakeholders"}),": May participate in reviewing the results of UAT and provide feedback or approval for the release candidate."]}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h3,{id:"3-deployment-to-production-environment",children:"3. Deployment to Production Environment"}),"\n",(0,t.jsxs)(n.p,{children:["Deployments to the ",(0,t.jsx)(n.strong,{children:"production environment"})," are triggered manually after a release candidate has passed all tests and UAT in the test environment."]}),"\n",(0,t.jsx)(n.h4,{id:"steps-2",children:"Steps:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Create a Production Release"}),": Once UAT is complete, the release candidate is finalized, and a production release is created and tagged in GitHub."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Trigger the Production Deployment"}),": The deployment is triggered manually via GitHub Actions."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"AWS CDK Deployment"}),":","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["The pipeline assumes an AWS role for the ",(0,t.jsx)(n.strong,{children:"production account"}),"."]}),"\n",(0,t.jsx)(n.li,{children:"AWS CDK provisions the infrastructure and deploys the release to production via CloudFormation."}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Smoke Testing"}),":","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Basic smoke tests are run to verify that key functionalities are working in production."}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Post-Deployment Monitoring"}),":","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Monitoring tools like AWS CloudWatch are used to track application performance and identify potential issues."}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Rollback Mechanism"}),":","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"If any critical issues are detected in production, the deployment is rolled back to the previous stable version automatically using AWS CloudFormation."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"who-is-involved-2",children:"Who is involved:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Developers"}),": Manage the production deployment process, monitor the system post-deployment, and address any issues that arise during or after deployment."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Testing Team"}),": May assist in validating the final release, ensuring it matches the UAT expectations."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Stakeholders"}),": May validate the production release post-deployment to ensure it meets business requirements."]}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"rollback-strategy",children:"Rollback Strategy"}),"\n",(0,t.jsx)(n.p,{children:"For every environment, we implement an automated rollback strategy in case the deployment encounters issues. This ensures that we can quickly revert to a stable state without manual intervention."}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"AWS CloudFormation Rollback"}),": If any deployment fails during the infrastructure provisioning, AWS CloudFormation automatically reverts the changes to the previous state."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Application Rollback"}),": In case of application issues, the GitHub Actions pipeline can be configured to roll back to the previous stable version of the application."]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Manual Intervention"}),": In cases where manual rollback is necessary (e.g., during production incidents), the DevOps team is responsible for initiating the rollback using the predefined rollback procedures."]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"deployment-responsibilities",children:"Deployment Responsibilities"}),"\n",(0,t.jsx)(n.h3,{id:"developers",children:"Developers"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Trigger Development Deployments"}),": Automatically triggered when merging pull requests."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Monitor Development Environment"}),": Ensure that development deployments are functioning as expected."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Draft Release Candidates"}),": When code is stable, create release candidates for testing."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Manage Test and Production Deployments"}),": Oversee deployments to test and production environments."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Fix Issues"}),": Resolve any issues that occur during testing, UAT, or production deployment."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Manage Rollbacks"}),": Handle any necessary rollbacks in the event of a deployment failure."]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"testing-team",children:"Testing Team"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Create UAT Test Plans"}),": Develop and execute test plans to ensure the software meets business requirements."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Conduct UAT"}),": Perform testing during UAT to validate the release candidate in the test environment."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Report Issues"}),": Provide detailed feedback on any issues found during UAT for the developers to resolve."]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"stakeholders",children:"Stakeholders"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Provide Feedback"}),": Review UAT results and provide feedback."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Validate Production Release"}),": Provide final validation after the production deployment, if needed."]}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"deployment-validation-and-monitoring",children:"Deployment Validation and Monitoring"}),"\n",(0,t.jsx)(n.p,{children:"For every deployment, the following validation and monitoring steps are performed:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Smoke Tests"}),": Automatically run smoke tests after each deployment to validate that critical functionality is working."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Monitoring Tools"}),": Use AWS CloudWatch or similar tools to monitor the health and performance of the application post-deployment."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Alerts"}),": Set up automatic alerts for any failures or performance degradations in the production environment."]}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"tools-and-technologies",children:"Tools and Technologies"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"GitHub Actions"}),": Used for automating the deployment process across environments."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"AWS CDK"}),": Manages infrastructure as code for all environments (development, test, production)."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"AWS CloudFormation"}),": Used by AWS CDK to deploy and manage resources."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"AWS IAM"}),": Manages access and roles for deployment to different environments."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Monitoring Tools"}),": AWS CloudWatch for performance monitoring and alerting."]}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.p,{children:"This deployment process ensures that our applications are deployed consistently and reliably across all environments. With a strong focus on automation, validation, and rollback strategies, we reduce manual intervention and increase deployment confidence."})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},6328:(e,n,s)=>{s.d(n,{A:()=>t});const t=s.p+"assets/images/aws-deployment-architecture-cdad11b0f502c8aa93de198a3534a77c.png"},8453:(e,n,s)=>{s.d(n,{R:()=>r,x:()=>l});var t=s(6540);const i={},o=t.createContext(i);function r(e){const n=t.useContext(o);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),t.createElement(o.Provider,{value:n},e.children)}}}]);