"use strict";(self.webpackChunkdigital_development_playbook=self.webpackChunkdigital_development_playbook||[]).push([[709],{2048:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>d,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>c});var i=s(4848),t=s(8453);const r={},o="Coding Standards",l={id:"general-development-practices/coding-standards",title:"Coding Standards",description:"Overview",source:"@site/docs/general-development-practices/coding-standards.md",sourceDirName:"general-development-practices",slug:"/general-development-practices/coding-standards",permalink:"/digital-development-playbook/general-development-practices/coding-standards",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/general-development-practices/coding-standards.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Code Review Process and Standards",permalink:"/digital-development-playbook/general-development-practices/code-review-process-and-standards"},next:{title:"Testing Best Practices",permalink:"/digital-development-playbook/general-development-practices/testing-best-practices"}},d={},c=[{value:"Overview",id:"overview",level:2},{value:"General Guidelines",id:"general-guidelines",level:2},{value:"Commit Message Standards (Conventional Commits)",id:"commit-message-standards-conventional-commits",level:2},{value:"Conventional Commits Format",id:"conventional-commits-format",level:3},{value:"Commit Types",id:"commit-types",level:3},{value:"Examples of Conventional Commit Messages",id:"examples-of-conventional-commit-messages",level:3},{value:"Commit Message Guidelines",id:"commit-message-guidelines",level:3}];function a(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"coding-standards",children:"Coding Standards"})}),"\n",(0,i.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,i.jsx)(n.p,{children:"To maintain consistency and readability across our codebase, we follow these coding standards for all projects. These standards apply to all programming languages used within the team (e.g., C#, Python, etc.)."}),"\n",(0,i.jsx)(n.h2,{id:"general-guidelines",children:"General Guidelines"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Consistency"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Write consistent code across the team. Follow established patterns and avoid introducing conflicting styles."}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Indentation and Formatting"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Use 2 spaces for indentation (unless the project or language specifies otherwise)."}),"\n",(0,i.jsx)(n.li,{children:"Ensure proper use of line breaks and spacing between code blocks for readability."}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Naming Conventions"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Use descriptive variable and function names that clearly describe their purpose."}),"\n",(0,i.jsxs)(n.li,{children:["For example, ",(0,i.jsx)(n.code,{children:"getUserData()"})," is more descriptive than ",(0,i.jsx)(n.code,{children:"getData()"}),"."]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Comments"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:'Comment your code where necessary to explain the "why" behind complex logic.'}),"\n",(0,i.jsxs)(n.li,{children:["Avoid obvious comments, such as:","\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"// Add 1 to counter\r\ncounter += 1;\n"})}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"commit-message-standards-conventional-commits",children:"Commit Message Standards (Conventional Commits)"}),"\n",(0,i.jsxs)(n.p,{children:["We follow the ",(0,i.jsx)(n.strong,{children:"Conventional Commits"})," specification for commit messages. This ensures that our commit history is structured, easy to understand, and helps with automating semantic versioning and changelog generation."]}),"\n",(0,i.jsx)(n.h3,{id:"conventional-commits-format",children:"Conventional Commits Format"}),"\n",(0,i.jsxs)(n.p,{children:["Each commit message should include a ",(0,i.jsx)(n.strong,{children:"type"}),", an optional ",(0,i.jsx)(n.strong,{children:"scope"}),", and a ",(0,i.jsx)(n.strong,{children:"short description"})," of the change. If applicable, the issue ticket reference should also be included. Optionally, you can also include a body and footer for more details."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-text",children:"<type>[optional scope]: <short description> <(issue-ticket-reference)>\r\n\r\n[optional body]\r\n\r\n[optional footer]\n"})}),"\n",(0,i.jsx)(n.h3,{id:"commit-types",children:"Commit Types"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"feat"}),": A new feature for the user."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"fix"}),": A bug fix."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"docs"}),": Documentation changes (e.g., updating README files)."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"style"}),": Code style changes that do not affect functionality (e.g., formatting)."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"refactor"}),": Code changes that neither fix a bug nor add a feature."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"perf"}),": Performance improvements."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"test"}),": Adding or updating tests."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"chore"}),": Miscellaneous changes (e.g., updating build tasks, package management)."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"build"}),": Changes that affect the build system or dependencies."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"ci"}),": Changes to our CI/CD pipeline or configuration."]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"examples-of-conventional-commit-messages",children:"Examples of Conventional Commit Messages"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"feat(login): add remember me functionality (AB-123)"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"fix(auth): correct user authentication flow (CD-456)"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"docs(readme): update API documentation"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"refactor(user-model): improve user data structure"})}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"commit-message-guidelines",children:"Commit Message Guidelines"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Commit Early and Often"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Each commit should represent a small, logical change that can be independently reviewed."}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Atomic Commits"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Keep commits focused. Avoid mixing different types of changes (e.g., don\u2019t include both ",(0,i.jsx)(n.code,{children:"feat"})," and ",(0,i.jsx)(n.code,{children:"fix"})," in the same commit)."]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Use Descriptive Commit Messages"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Clearly describe ",(0,i.jsx)(n.strong,{children:"what"})," the change is and ",(0,i.jsx)(n.strong,{children:"why"})," it was made."]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Reference Issues and PRs"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["If applicable, reference the issue ticket reference in the commit message (e.g., ",(0,i.jsx)(n.code,{children:"fix(auth): correct authentication (CD-456)"}),")."]}),"\n"]}),"\n"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(a,{...e})}):a(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>o,x:()=>l});var i=s(6540);const t={},r=i.createContext(t);function o(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:o(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);