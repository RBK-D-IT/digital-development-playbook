"use strict";(self.webpackChunkdigital_development_playbook=self.webpackChunkdigital_development_playbook||[]).push([[67],{8335:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>a,contentTitle:()=>l,default:()=>h,frontMatter:()=>t,metadata:()=>o,toc:()=>d});var s=r(4848),i=r(8453);const t={},l="Branching Strategy and Git Workflow",o={id:"general-development-practices/branching-strategy",title:"Branching Strategy and Git Workflow",description:"Overview",source:"@site/docs/general-development-practices/branching-strategy.md",sourceDirName:"general-development-practices",slug:"/general-development-practices/branching-strategy",permalink:"/digital-development-playbook/general-development-practices/branching-strategy",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/general-development-practices/branching-strategy.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"General Development Practices",permalink:"/digital-development-playbook/category/general-development-practices"},next:{title:"Code Review Process and Standards",permalink:"/digital-development-playbook/general-development-practices/code-review-process-and-standards"}},a={},d=[{value:"Overview",id:"overview",level:2},{value:"Key Concepts",id:"key-concepts",level:2},{value:"Workflow Example",id:"workflow-example",level:2}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"branching-strategy-and-git-workflow",children:"Branching Strategy and Git Workflow"})}),"\n",(0,s.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,s.jsxs)(n.p,{children:["Our team follows ",(0,s.jsx)(n.strong,{children:"GitHub Flow"})," as our primary branching strategy. GitHub Flow is a simple and flexible workflow that encourages frequent collaboration and continuous integration. Code is developed in branches, tested, and merged into the ",(0,s.jsx)(n.code,{children:"main"})," branch, which triggers a deployment to the ",(0,s.jsx)(n.strong,{children:"development (dev) environment"}),"."]}),"\n",(0,s.jsx)(n.h2,{id:"key-concepts",children:"Key Concepts"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsxs)(n.strong,{children:[(0,s.jsx)(n.code,{children:"main"})," Branch"]}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["The ",(0,s.jsx)(n.code,{children:"main"})," branch reflects the ",(0,s.jsx)(n.strong,{children:"latest stable development version"})," of the code."]}),"\n",(0,s.jsxs)(n.li,{children:["Merging into ",(0,s.jsx)(n.code,{children:"main"})," automatically deploys the code to the ",(0,s.jsx)(n.strong,{children:"development environment"})," (dev), where internal testing is performed."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Production readiness"})," is determined through a separate release process. Code in ",(0,s.jsx)(n.code,{children:"main"})," is not deployed to production until it has passed all tests and is approved via a formal GitHub Release."]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Feature Branches"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Each new feature or bug fix is developed in a separate branch created off of ",(0,s.jsx)(n.code,{children:"main"}),"."]}),"\n",(0,s.jsxs)(n.li,{children:["Feature branches should be named descriptively, including an issue ticket reference if applicable (e.g., ",(0,s.jsx)(n.code,{children:"feature/AB-123-web-content-updates"}),", ",(0,s.jsx)(n.code,{children:"feature/login-page"})," or ",(0,s.jsx)(n.code,{children:"bugfix/fix-header-alignment"}),")."]}),"\n",(0,s.jsxs)(n.li,{children:["All changes are tested locally or in feature-specific environments before being merged into ",(0,s.jsx)(n.code,{children:"main"}),"."]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Pull Requests (PRs)"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Once a feature or fix is complete, create a pull request (PR) to merge the changes into the ",(0,s.jsx)(n.code,{children:"main"})," branch."]}),"\n",(0,s.jsx)(n.li,{children:"PRs must be reviewed and approved by at least one other team member before merging."}),"\n",(0,s.jsx)(n.li,{children:"Automated tests (via CI pipelines) will run against each PR to ensure stability."}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsxs)(n.strong,{children:["Merging to ",(0,s.jsx)(n.code,{children:"main"})]}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["After a pull request is approved and all tests pass, the feature branch is merged into the ",(0,s.jsx)(n.code,{children:"main"})," branch."]}),"\n",(0,s.jsxs)(n.li,{children:["Merging to ",(0,s.jsx)(n.code,{children:"main"})," triggers an automatic deployment to the ",(0,s.jsx)(n.strong,{children:"development environment"})," for internal testing and iteration."]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Release Process"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["The code in ",(0,s.jsx)(n.code,{children:"main"})," becomes ",(0,s.jsx)(n.strong,{children:"production-ready"})," only after it has passed testing in the ",(0,s.jsx)(n.strong,{children:"test environment"})," and a ",(0,s.jsx)(n.strong,{children:"release candidate"})," has been approved."]}),"\n",(0,s.jsxs)(n.li,{children:["Once a release candidate is finalized, it is tagged as a ",(0,s.jsx)(n.strong,{children:"production release"})," and deployed to the ",(0,s.jsx)(n.strong,{children:"production environment"}),"."]}),"\n",(0,s.jsxs)(n.li,{children:["For details on the release and deployment process, refer to the ",(0,s.jsx)(n.a,{href:"/digital-development-playbook/devops-and-automation/deployment-process",children:"Deployment Process"})," document."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"workflow-example",children:"Workflow Example"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Create a Branch"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["From the ",(0,s.jsx)(n.code,{children:"main"})," branch, create a feature branch:","\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"git checkout -b feature/your-feature-name\n"})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Work on Your Feature"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Make meaningful commits to the feature branch, following the ",(0,s.jsx)(n.a,{href:"/digital-development-playbook/general-development-practices/coding-standards#commit-message-standards-conventional-commits",children:"Conventional Commits"})," specification for commit messages."]}),"\n",(0,s.jsxs)(n.li,{children:["Commit messages should include a type (e.g., ",(0,s.jsx)(n.code,{children:"feat"}),", ",(0,s.jsx)(n.code,{children:"fix"}),") and a short description of the change."]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Push Your Branch to GitHub"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Push your branch to the remote repository:","\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"git push origin feature/your-feature-name\n"})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Open a Pull Request"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Once the feature is complete, open a pull request to merge your feature branch into ",(0,s.jsx)(n.code,{children:"main"}),"."]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Review and Merge"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["After your pull request has been reviewed and approved, and all CI tests pass, merge the feature branch into ",(0,s.jsx)(n.code,{children:"main"}),"."]}),"\n",(0,s.jsxs)(n.li,{children:["This will trigger an automatic deployment to the ",(0,s.jsx)(n.strong,{children:"development environment"}),"."]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Create a Release"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Once the code in ",(0,s.jsx)(n.code,{children:"main"})," is stable and ready for production, follow the release process to create a release candidate and deploy it to ",(0,s.jsx)(n.strong,{children:"test"})," and eventually ",(0,s.jsx)(n.strong,{children:"production"}),"."]}),"\n",(0,s.jsxs)(n.li,{children:["For detailed instructions on creating releases, see the ",(0,s.jsx)(n.a,{href:"/digital-development-playbook/devops-and-automation/deployment-process",children:"Deployment Process"}),"."]}),"\n"]}),"\n"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>l,x:()=>o});var s=r(6540);const i={},t=s.createContext(i);function l(e){const n=s.useContext(t);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:l(e.components),s.createElement(t.Provider,{value:n},e.children)}}}]);